@page "/servers/{Guid:guid}/logs"
@inject GameServerService GameServerService

<MudContainer Class="mt-6 mb-6" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3">
        Logs

        @if (_gameServer == null)
        {
             <MudChip Variant="Variant.Text">Unknown</MudChip>
        }
    </MudText>

    <MudText Typo="Typo.subtitle1">
        Checking your server's log files
    </MudText>

    <ServerTable GameServer="_gameServer" />

    <MudSelect T="string" @bind-Value="selectedFile" Label="Log File" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="mt-4 mb-4">
        @foreach (string fileName in files)
        {
            <MudSelectItem T="string" Value="@fileName">@fileName</MudSelectItem>
        }
    </MudSelect>

    <MudTextField @bind-Value="text" Variant="Variant.Outlined" Lines="30" ReadOnly="true"></MudTextField>
</MudContainer>


@code {
    [Parameter]
    public Guid Guid { get; set; }

    private IGameServer? _gameServer;
    private List<string> files = new();
    private string? selectedFile;
    private string text = string.Empty;
    private Timer? timer;

    protected override void OnInitialized()
    {
        timer = new Timer((state) => InvokeAsync(ReadLogFileText), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    protected override async Task OnParametersSetAsync()
    {
        _gameServer = GameServerService.Instances.Where(x => x.Config.Guid == Guid).FirstOrDefault();

        if (_gameServer != null)
        {
            files = await ProgramDataService.Logs.GetFiles(_gameServer.Config.Guid);
            selectedFile = files.FirstOrDefault();
            await ReadLogFileText();
        }
    }

    private async Task ReadLogFileText()
    {
        if (selectedFile != null && _gameServer != null)
        {
            string path = ProgramDataService.Logs.GetFile(_gameServer.Config.Guid, selectedFile);
            text = await FileEx.ReadAllText(path);
            await InvokeAsync(StateHasChanged);
        }
    }
}
