@inject GameServerService GameServerService
@implements IDisposable

@if (GameServer != null)
{
    List<IGameServer> gameServers = new() { GameServer };

    <MudTable Items="@gameServers" Dense="true" MultiSelection="false" Class="mt-4 mb-4">
        <HeaderContent>
            <MudTh>Game</MudTh>
            <MudTh>PID</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Map</MudTh>
            <MudTh>Players</MudTh>
            <MudTh>Uptime</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Game">
                <MudTooltip Text="@context.Name" Placement="Placement.Right">
                    <MudImage Src="@context.ImageSource" Alt="@context.Config.ClassName" Elevation="2" Class="rounded-lg" Width="24" />
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="PID">@context.Process.Id</MudTd>
            <MudTd DataLabel="Status">
                <MudChip Variant="Variant.Outlined" Size="Size.Small" Color="@context.Status.ToColor()">@context.Status.ToStringEx()</MudChip>
            </MudTd>
            <MudTd DataLabel="Name">@context.Config.Basic.Name</MudTd>
            <MudTd DataLabel="Map">@GameServerService.GetResponse(context)?.MapName</MudTd>
            <MudTd DataLabel="Players">
                @if (context.Config is IProtocolConfig protocolConfig)
                {
                    var response = GameServerService.GetResponse(context);

                    if (response != null)
                    {
                        <span>@response.Player / @response.MaxPlayer</span>
                    }
                }
            </MudTd>
            <MudTd DataLabel="Uptime">@UptimeString(context.Process.StartTime)</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter]
    public IGameServer? GameServer { get; set; }

    private Timer? timer;

    protected override void OnInitialized()
    {
        GameServerService.GameServersHasChanged += () => InvokeAsync(StateHasChanged);
        timer = new Timer((state) => InvokeAsync(StateHasChanged), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private string UptimeString(DateTime? startTime)
    {
        if (startTime == null)
        {
            return "0:00:00:00";
        }

        TimeSpan t = TimeSpan.FromSeconds((DateTime.Now - startTime.Value).TotalSeconds);

        return string.Format("{0}:{1:D2}:{2:D2}:{3:D2}", (int)t.TotalDays, t.Hours, t.Minutes, t.Seconds);
    }
}
