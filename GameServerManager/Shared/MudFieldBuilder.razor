@foreach (PropertyInfo field in _fields)
{
    @if (field.TryGetCustomAttribute<TextFieldAttribute>(out TextFieldAttribute? textField))
    {
        @if (textField.InputType == InputType.Password)
        {
            <MudPasswordField
                HelperText="@textField.HelperText"
                Label="@textField.Label"
                Required="@textField.Required"
                RequiredError="@textField.RequiredError"
                ReadOnly="@textField.ReadOnly"
                Placeholder="@textField.Placeholder"
                Value="@(field.GetValue(_config)?.ToString() ?? string.Empty)"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
        else if (textField.FolderBrowser)
        {
            <MudFolderBrowserField
                HelperText="@textField.HelperText"
                Label="@textField.Label"
                Required="@textField.Required"
                RequiredError="@textField.RequiredError"
                ReadOnly="@textField.ReadOnly"
                Placeholder="@textField.Placeholder"
                Value="@(field.GetValue(_config)?.ToString() ?? string.Empty)"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
        else if (textField.ProcessorAffinity)
        {
            <MudProcessorAffinityField
                HelperText="@textField.HelperText"
                Label="@textField.Label"
                Required="@textField.Required"
                RequiredError="@textField.RequiredError"
                ReadOnly="@textField.ReadOnly"
                Placeholder="@textField.Placeholder"
                Value="@((uint)(IntPtr.TryParse(field.GetValue(_config)?.ToString(), out IntPtr value) ? value : IntPtr.Zero))"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
        else
        {
            <MudTextField 
                T="string"
                HelperText="@textField.HelperText"
                Label="@textField.Label"
                Required="@textField.Required"
                RequiredError="@textField.RequiredError"
                ReadOnly="@textField.ReadOnly"
                Placeholder="@textField.Placeholder"
                Value="@(field.GetValue(_config)?.ToString() ?? string.Empty)"
                ValueChanged="@((e) => field.SetValue(_config, e))"
                InputType="@textField.InputType" />
        }
    }
    // If C# supports Generic attributes, it can be simpler
    else if (field.TryGetCustomAttribute<NumericFieldAttribute>(out NumericFieldAttribute? numericField))
    {
        @if (field.PropertyType == typeof(int))
        {
            <MudNumericField
                T="int"
                Label="@numericField.Label"
                Required="@numericField.Required"
                Variant="Variant.Text"
                Min="@((int)numericField.Min)"
                Max="@((int)numericField.Max)"
                Step="@((int)numericField.Step)"
                Value="@(int.TryParse(field.GetValue(_config)?.ToString(), out int value) ? value : (int)numericField.Min)"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
        else if (field.PropertyType == typeof(double))
        {
            <MudNumericField
                T="double"
                Label="@numericField.Label"
                Required="@numericField.Required"
                Variant="Variant.Text"
                Min="@numericField.Min"
                Max="@numericField.Max"
                Step="@numericField.Step"
                Value="@(double.TryParse(field.GetValue(_config)?.ToString(), out double value) ? value : numericField.Min)"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
        else if (field.PropertyType == typeof(decimal))
        {
            <MudNumericField
                T="decimal"
                Label="@numericField.Label"
                Required="@numericField.Required"
                Variant="Variant.Text"
                Min="@((decimal)numericField.Min)"
                Max="@((decimal)numericField.Max)"
                Step="@((decimal)numericField.Step)"
                Value="@(decimal.TryParse(field.GetValue(_config)?.ToString(), out decimal value) ? value : (decimal)numericField.Min)"
                ValueChanged="@((e) => field.SetValue(_config, e))" />
        }
    }
    else if (field.TryGetCustomAttribute<CheckBoxAttribute>(out CheckBoxAttribute? checkBox))
    {
        bool isChecked = bool.TryParse(field.GetValue(_config)?.ToString(), out bool value) ? value : false;

        @if (checkBox.IsSwitch)
        {
            <MudField Variant="Variant.Text" InnerPadding="false" Label="@checkBox.Label" HelperText="@checkBox.HelperText">
                <MudSwitch
                    T="bool"
                    Checked="@isChecked"
                    CheckedChanged="@((e) => field.SetValue(_config, e))"
                    Required="@checkBox.Required"
                    RequiredError="@checkBox.RequiredError"
                    Error="@(!isChecked)"
                    ErrorText="@checkBox.RequiredError"
                    Color="Color.Primary" />
            </MudField>
        }
        else
        {
            <MudCheckBox
                T="bool"
                Checked="@isChecked"
                CheckedChanged="@((e) => field.SetValue(_config, e))"
                Required="@checkBox.Required"
                RequiredError="@checkBox.RequiredError"
                Error="@(!isChecked)"
                ErrorText="@checkBox.RequiredError"
                Color="Color.Primary" >

                @if (!string.IsNullOrWhiteSpace(checkBox.Label))
                {
                    Regex regex = new(@"(?:__|[*#])|\[(.*?)\]\((.*?)\)");
                    MatchCollection matches = regex.Matches(checkBox.Label);
                    int i = 0;

                    @if (matches.Count <= 0)
                    {
                        @checkBox.Label
                    }
                    else
                    {
                        @foreach (Match match in matches)
                        {
                            @while (i < match.Index)
                            {
                                @checkBox.Label[i++];
                            }

                            i = match.Index + match.Length;

                            <MudLink Href="@match.Groups[2].Value" Target="_blank">@match.Groups[1].Value</MudLink>
                        }
                    }
                }
            </MudCheckBox>
        }
    }
    else if (field.TryGetCustomAttribute<RadioGroupAttribute>(out RadioGroupAttribute? radioGroup) && field.TryGetCustomAttributes<RadioAttribute>(out List<RadioAttribute> radios))
    {
        <MudField Label="@radioGroup.Text" Variant="Variant.Text" InnerPadding="false" HelperText="@radioGroup.HelperText">
            <MudRadioGroup T="string" SelectedOptionChanged="@((e) => field.SetValue(_config, e))" SelectedOption="@field.GetValue(_config)?.ToString()"> @* TODO: Radio button issue *@
                @foreach (RadioAttribute radio in radios)
                {
                    <MudRadio T="string" Option="@radio.Option" Color="Color.Primary" Class="mr-2">@radio.Option</MudRadio>
                }
            </MudRadioGroup>
        </MudField>
    }
    else if (field.TryGetCustomAttribute<SelectAttribute>(out SelectAttribute? select))
    {
        @if (select.GameServerBranches)
        {
            Dictionary<string, SteamCMD.Branch> branches = SteamCMD.Branches[((ISteamCMDConfig)GameServer.Config).SteamCMD.AppId];
            string? value = field.GetValue(_config)?.ToString();

            if (string.IsNullOrWhiteSpace(value))
            {
                value = branches.First().Key;
            }

            <MudSelect
                T="string"
                Label="@select.Label"
                Value="@value"
                SelectedValuesChanged="@((e) => field.SetValue(_config, e.FirstOrDefault()))"
                AnchorOrigin="Origin.BottomCenter"
                HelperText="@select.HelperText">
                @foreach (KeyValuePair<string, SteamCMD.Branch> entry in branches)
                {
                    <MudSelectItem Value="@entry.Key">@(entry.Value.PasswordRequired ? "🔒 " : "") @entry.Key</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            ISelectItem o = (ISelectItem)Activator.CreateInstance(select.SelectItemsType!)!;

            <MudSelect T="string"
                Label="@select.Label"
                Value="@(field.GetValue(_config)?.ToString())"
                SelectedValuesChanged="@((e) => field.SetValue(_config, e.FirstOrDefault()))"
                AnchorOrigin="Origin.BottomCenter"
                HelperText="@select.HelperText">
                @foreach (string selectItem in o.Values)
                {
                    <MudSelectItem Value="@(selectItem)" />
                }
            </MudSelect>
        }
    }
}

@code {
    [Parameter]
    public PropertyInfo Tab { get; set; } = null!;

    [Parameter]
    public object Config { get; set; } = null!;

    [Parameter]
    public IGameServer GameServer { get; set; } = null!;

    private PropertyInfo[] _fields { get; set; } = new PropertyInfo[0];
    private object? _config;

    protected override void OnParametersSet()
    {
        _fields = Tab.PropertyType.GetProperties();
        _config = Tab.GetValue(Config);
    }
}
